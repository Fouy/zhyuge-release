
#user  nobody;
worker_processes  5;

error_log  logs/error.log  notice;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    fastcgi_intercept_errors on;
    #access_log  logs/access.log  main;

    sendfile        on;
    tcp_nopush     on;

    keepalive_timeout  65;

    gzip  on;

    lua_package_path "/Users/xuefeihu/hugege/code-sublime/zhyuge/lua/?.lua;/Users/xuefeihu/software/openresty/lualib/?.lua;;";
    lua_code_cache off;

    client_max_body_size 100M;
    client_body_buffer_size 10M;

    lua_shared_dict configCache 10m;

    # 初始化脚本
    init_by_lua_file "/Users/xuefeihu/hugege/code-sublime/zhyuge/lua/init.lua";
    # init_worker_by_lua_file "/Users/xuefeihu/hugege/code-sublime/zhyuge/lua/init_timer.lua";

    #lua_ssl_verify_depth 3;
    #lua_ssl_trusted_certificate "/Users/xuefeihu/hugege/code-sublime/zhyuge/certs/mtl.ttsqgs.com.pem";

    server {
        listen       80;
        server_name  localhost;

        charset utf-8;

        #模板文件从哪加载  
        set $template_root "/Users/xuefeihu/hugege/code-sublime/zhyuge/html";

        location ~ ^/(images|thumbs)/* {
            root /Users/xuefeihu/hugege/code-sublime/zhyuge-images;
        }

        location / {
            content_by_lua_file lua/dispatch/mvc.lua;
            header_filter_by_lua_file lua/filter/header_filter.lua;
        }

        location ~ \.(js|css|html|png|jpg|gif|woff|woff2|tff|ico)$ {
            root html;
        }

        # 美图录图片代理
        location /proxy/meitulu {
            resolver 8.8.8.8;
            content_by_lua_block {
                local args = ngx.req.get_uri_args()
                local client = require "resty.http":new()
                local param = {}
                param.headers = { ['Referer'] = args['refer'] }
                param.ssl_verify = false
                local res, err = client:request_uri(args['imgUrl'], param)
                if err then
                    return {status=ngx.HTTP_SERVICE_UNAVAILABLE}
                end

                ngx.say(res.body)
            }
            header_filter_by_lua_file lua/filter/header_filter.lua;
        }

        error_page 400 401 402 403 404 = /common/four04;
        error_page 500 502 503 504 = /50x.html;
        
        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
